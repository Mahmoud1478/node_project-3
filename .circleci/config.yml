version: 2.1
orbs:
  node: circleci/node@5.0.3
  eb: circleci/aws-elastic-beanstalk@2.0.1
  aws-cli: circleci/aws-cli@3.1.4

jobs:
  build_back:
    docker:
      - image: "cimg/base:stable"
      - image: "circleci/postgres:12-alpine-ram"
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: toor
          POSTGRES_DB: store_test
    steps:
      - node/install:
          node-version: '16.18'
      - checkout
      # building back
      - restore_cache:
          keys:
            - v1-npm-deps-{{ checksum "./back/package.json" }}
            - v1-npm-deps-
      - run:
          name : "install back node modules"
          command: npm run back:install
      - save_cache:
          key: v1-npm-deps-{{ checksum "./back/package.json" }}
          paths:
            - .back/node_modules
      - run:
          name: "bulding back dist"
          command : npm run back:build
      - run:
          name : "initialize test db"
          command : npm run db:init
      - run:
          name: "app testing"
          command : npm run back:test    
  build_front:
    docker:
      - image: "cimg/base:stable"
    steps:
      - node/install:
          node-version: '16.18'
      - checkout
       # building front
      - restore_cache:
          keys:
            - v1-npm-deps-{{ checksum "./front/package.json" }}
            - v1-npm-deps-
      - run:
          name : "install front node modules"
          command: npm run front:install
      - save_cache:
          key: v1-npm-deps-{{ checksum "./front/package.json" }}
          paths:
            - .front/node_modules
      - run:
          name: "bulding front dist"
          command : npm run front:build
      - run:
          name: "testing front"
          command : npm run front:test

  deploy:
    docker:
      - image: "cimg/base:stable"
    steps:
      - node/install:
          node-version: '16.18'
      - aws-cli/setup
      - eb/setup
      - checkout
      - run:
          name: "initialize elasticbeanstalk"
          command : |
              cd back/
              eb init "$EB_APP_NAME" --platform node.js --region "$AWS_REGION"
              cd ..

      # buliding back 
      - restore_cache:
          keys:
            - v1-npm-deps-{{ checksum "./back/package.json" }}
            - v1-npm-deps-
      - run:
          name : "install back node modules"
          command: npm run back:install
      - save_cache:
          key: v1-npm-deps-{{ checksum "./back/package.json" }}
          paths:
            - .back/node_modules
      # build front 
      - restore_cache:
          keys:
            - v1-npm-deps-{{ checksum "./front/package.json" }}
            - v1-npm-deps-
      - run:
          name : "install front node modules"
          command: npm run front:install

      - save_cache:
          key: v1-npm-deps-{{ checksum "./front/package.json" }}
          paths:
            - .front/node_modules
      # setiing env
      - run:
          name: "set environment variables"
          command : eb setenv ENV=pro TOKEN_SECRET=$TOKEN_SECRET PORT=$PORT BCYPT_SALT=$BCYPT_SALT BCYPT_SECRET=$BCYPT_SECRET PRO_DATABASE_DRIVER=$PRO_DATABASE_DRIVER PRO_DATABASE_HOST=$PRO_DATABASE_HOST PRO_DATABASE_USER=$PRO_DATABASE_USER PRO_DATABASE_PASSWORD=$PRO_DATABASE_PASSWORD PRO_DATABASE_NAME=$PRO_DATABASE_NAME PRO_DATABASE_PORT=$PRO_DATABASE_PORT
      
      # synic db tables
      - run:
          name: "prepare database"
          command : npm run pro_db_synic
      # deploying
      - run:
          name: "front deploying"
          command : npm run front:deploy
      - run:
          name: "back deploying"
          command : npm run back:deploy
workflows:
  project_3:
    jobs:
      - build_back
      - build_front
      - hold:
          filters:
            branches:
              only:
                - master
          type: approval
          requires:
            - build_back
            - build_front
      - deploy:
          requires: 
            - hold